
#include <stdio.h>					      //Incluimos las bibliotecas necesarias para el correcto funcionamiento del programa
#include <stdlib.h>
#include <string.h>
#include <locale.h>
#include <conio.h>
#include "SerialClass/SerialClass.h"
#define MAX_BUFFER 200                    //Definimos el varios valores necesarios
#define PAUSA_MS 200
#define LONGCAD 50
#define N 100

typedef struct						    //Creamos una estructura de tipo registro donde
{										//guardaremos un vector de temperaturas correspondiente
	int dia;							//a una fecha y una hora caracter�sticas
	int mes;
	int anio;
	int hora;
	int minutos;
	float temperatura[N];
}registro;
														//Declaramos las distintas funciones a las que iremos llamando a lo largo												//de todo el programa
int menu(void);											//Imprime las opciones y devuelve la opcion escogida
void verifica_sensores(Serial*, char*);					//Lee una temperatura para comprovar el funcionamiento del sensor
registro monitorizar_sensor_temperatura(Serial*, int*); //Realiza una series de lecturas de t durante cierto tiempo
void activar_alarma_temperatura(Serial* Arduino);       //Envia la se�al para activar o desactivar la alarma(led)
void comprobar_mensajes(Serial*);						//Comprueba los mensajes recibidos desde Arduino
float leer_sensor_temperatura(Serial*);                 //Envia la se�al para leer una temperatura y la devuelve a la variable
int Enviar_y_Recibir(Serial*, const char*, char*);		//Funcion principal para la comunicacion entre visual y arduino
float float_from_cadena(char* cadena);					//Transforma cadenas de caracteres en formato float
void registrar_temperatura(registro*, int);				//Guarda en el vector registro las temperaturas captadas
void escribir_fichero_registro(registro* r, int nr, int nt);//Genera un fichero con los registros generados


int main(void)		//FUNCION PRINCIPAL
{
	Serial* Arduino;				 //Variable de comunicacion com arduino
	char puerto[] = "COM3";			 //Puerto serie al que est� conectado Arduino
	int opcion_menu, nr = 0, nt = 0; //Variables: opcion escogida, numero de registros, numero de temperaturas
	registro r;						 //Variable de tipo registro


	setlocale(LC_ALL, "es-ES");          //Funcion para que no haya errores en la impresion de caracteres
	Arduino = new Serial((char*)puerto); //Conexion con arduino en el puerto indicado
	do   //Bucle para que el programa funcione hasta que se marque 5 en el menu
	{
		comprobar_mensajes(Arduino);	//Comprobar mensajes recibidos de arduino			
		opcion_menu = menu();			//llamada a la funcion menu para guardar la opcion escogida por el usuario							
		switch (opcion_menu)			//Llamada a la funcion correspondiente en cada opcion
		{
		case 0: break;							//0->Vuelve a pedir otra opcion
		case 1:	
			verifica_sensores(Arduino, puerto); //1->Hace una lectura del sensor para comprobar su correcto funcionamiento
			break;
		case 2:
			r = monitorizar_sensor_temperatura(Arduino, &nt); //2->hace varias lecturas del sensor y lo guarda en la estructuta registro
			nr++;											  //Ademas cuenta el numero de registros realizados
			break;
		case 3:
			activar_alarma_temperatura(Arduino);   //3->Activa o desactiva la alarma en funcion de su estado anterior
			break;
		case 4:
			escribir_fichero_registro(&r, nr, nt); //4->Genera un fichero con las temperaturas captadas en el caso dos guardadas en registro
			break;
		case 5:									   //5->Cierra el programa
			break;												
		default: printf("\nOpci�n incorrecta\n");  //CUalquier otro numero imprime el mensaje anterior
		}
	} while (opcion_menu != 5);			
	return 0;
}



int menu(void)													//Esta funcion imprime el menu de opciones por pantalla y devuelve	
{																//a la funcion principal la escogida por el usuario
	static int opcion = -1;

	if (opcion != 0)
	{
		printf("\n");
		printf("Men� Principal\n");
		printf("==============\n");
		printf("1 - Verificar sensores.\n");
		printf("2 - Monitorizar sensores.\n");
		printf("3 - Activar/Desactivar alarma por distancia\n");
		printf("4 - Generar fichero de temperaturas\n");
		printf("5 - Salir de la aplicaci�n\n");
		printf("Opci�n:");
	}

	if (_kbhit())
	{
		opcion = (int)_getch() - '0';
		printf("%d\n", opcion);
	}
	else
		opcion = 0;

	return opcion;
}

void verifica_sensores(Serial* Arduino, char* port)								//funcion case 1
{
	float temperatura;                                                          //inicializa variable donde se guarda la temp. leida

	if (Arduino->IsConnected())												    //Comprueba que arduino esta conectado
	{
		temperatura = leer_sensor_temperatura(Arduino);							//guarda en la variable la temperatura devuelta por la funcion
		if (temperatura != -1)													//Si es distinto de -1 imprime por pant5alla la temperatura
			printf("\nTemperatura: %f\n", temperatura);
	}
	else																		//En el caso de que sea -1 imprime un error de conexion
	{
		printf("\nNo se ha podido conectar con Arduino.\n");
		printf("Revise la conexi�n, el puerto %s y desactive el monitor serie del IDE de Arduino.\n", port);
	}
}


float leer_sensor_temperatura(Serial* Arduino)			  //funcion encargada de mandar la se�al para que el sensor lea una temperatura 
{
	float temperatura;                 //Declaracion de variables
	int bytesRecibidos;
	char mensaje_recibido[MAX_BUFFER];
																					   //Almacena en la variable bytesRecibidos el espacio que
	bytesRecibidos = Enviar_y_Recibir(Arduino, "GET_TEMPERATURA\n", mensaje_recibido); //ocupa el mensaje devuelto desde arduino, el cual se alamcena en
																					   //la variable mensaje_recibido. Tambien envia a arduino un mensaje
	if (bytesRecibidos <= 0)                                    //En este caso el programa no ha recibido mensaje de respuesta de arduino
	{
		printf("\nNo se ha recibido respuesta a la petici�n\n");
		temperatura = -1;
	}
	else									//en el caso que si reciba una respuesta de arduino imprime por patalla el mensaje y lo que ocupa
	{
		printf("\nLa respuesta recibida tiene %d bytes. Recibido=%s\n", bytesRecibidos, mensaje_recibido);
		temperatura = float_from_cadena(mensaje_recibido);  //Ademas adjudica a la variable temperatura el valor que entrega arduino pero antes
	}														//lo pasa por una funcion que lo transforma de tipo string a float
	return temperatura;    //Devuelve la temperatura 
}


float float_from_cadena(char* cadena)				//Funcion encargada de pasar un elemento de tipo char* a float		 	
{
	float numero = 0;				  //Declaracion de variables
	int i, divisor = 10, estado = 0;


	for (i = 0; cadena[i] != '\0' && estado != 3 && i < MAX_BUFFER; i++)
		switch (estado)
		{
		case 0:// Antes del n�mero
			if (cadena[i] >= '0' && cadena[i] <= '9')
			{
				numero = cadena[i] - '0';
				estado = 1;
			}
			break;
		case 1:// Durante el n�mero
			if (cadena[i] >= '0' && cadena[i] <= '9')
				numero = numero * 10 + cadena[i] - '0';
			else
				if (cadena[i] == '.' || cadena[i] == ',')
					estado = 2;
				else
					estado = 3;
			break;
		case 2: // Parte decimal
			if (cadena[i] >= '0' && cadena[i] <= '9')
			{
				numero = numero + (float)(cadena[i] - '0') / divisor;
				divisor *= 10;
			}
			else
				estado = 3;
			break;
		}
	return numero;
}


int Enviar_y_Recibir(Serial* Arduino, const char* mensaje_enviar, char* mensaje_recibir)      //Funcion encargada de intercambiar mensajes entre visual
{																							  //y arduino	
	int bytes_recibidos = 0, total = 0;     //Declaracion de variables
	int intentos = 0, fin_linea = 0;


	Arduino->WriteData((char*)mensaje_enviar, strlen(mensaje_enviar));  //Funcion que manda a arduino un mensaje
	Sleep(PAUSA_MS);													//espera x tiempo

	bytes_recibidos = Arduino->ReadData(mensaje_recibir, sizeof(char) * MAX_BUFFER - 1); //Recibe un mensaje de arduino 

	while ((bytes_recibidos > 0 || intentos < 5) && fin_linea == 0)		//lee el mensaje mandado por arduino hasta llegar al final
	{
		if (bytes_recibidos > 0)
		{
			total += bytes_recibidos;
			if (mensaje_recibir[total - 1] == 13 || mensaje_recibir[total - 1] == 10)
				fin_linea = 1;
		}
		else
			intentos++;
		Sleep(PAUSA_MS);
		bytes_recibidos = Arduino->ReadData(mensaje_recibir + total, sizeof(char) * MAX_BUFFER - 1);
	}
	if (total > 0)
		mensaje_recibir[total - 1] = '\0';

	return total; //Devuelve el espacio que ocupa el mensaje recibido 
}


registro monitorizar_sensor_temperatura(Serial* Arduino, int* nt)		//Funcion case 2:					
{
	float frecuencia, temperatura;                                      //Declaracion de variables
	//int i=0;
	char tecla;
	registro r;
	int i = 0;
	do
	{
		printf("Establezca frecuencia de muestreo (0,5 Hz - 2,0 Hz):");//Pide al usuario la frecuencia de muestreo de las temperaturas
		scanf_s("%f", &frecuencia);
	} while (frecuencia < 0.5 || frecuencia>2.0);

	printf("Pulse una tecla para finalizar la monitorizaci�n\n");     //lee temperaturas desde el sensor hasta que el usuario pulse una tecla cualquiera
	registrar_temperatura(&r, i);									  //llamada a la funcion que inicializa el elemento registro
	do												//Bucle que lee temperaturas desde el sensor hasta pulsar tecla
	{
		if (Arduino->IsConnected())					//Comprueba que arduino esta conectado
		{
			temperatura = leer_sensor_temperatura(Arduino);  //Guarda en la variable la temperatura que la funcion manda a arduino leer
			if (temperatura != -1)
			{
				printf("%.2f ", temperatura);		   //Imprime las temperaturas por pantalla
				r.temperatura[i] = temperatura;		   //Guarda las temperaturas en el vector de la estructura registro
				i++;                                   //aumenta en 1 el numero de temperaturas leidas
				*nt = i;
			}

			else
				printf("XXX ");             //Si no recibe una temperatura imprme XXX por pantalla
		}
		else
			printf("\nNo se ha podido conectar con Arduino.\n");   //Imprime error de conexion
		if ((1 / frecuencia) * 1000 > PAUSA_MS)
			Sleep((1 / frecuencia) * 1000 - PAUSA_MS);
	} while (_kbhit() == 0);
	tecla = _getch();
	return r;						//devuelve el elemento registro a la funcion principal
}


void activar_alarma_temperatura(Serial* Arduino)			//Funcion manda mensaje a arduino para activar/desactivar alarma				
{
	int bytesRecibidos;
	char mensaje_recibido[MAX_BUFFER];

	bytesRecibidos = Enviar_y_Recibir(Arduino, "SET_MODO_ALARMA\n", mensaje_recibido); //Funcion de comunicacion entre programas
	if (bytesRecibidos <= 0)
		printf("\nNo se ha recibido confirmaci�n\n");   //Imprime error
	else
		printf("\n%s\n", mensaje_recibido);			   //Imprime el mensaje recibido
}


void comprobar_mensajes(Serial* Arduino)		//Funcion que lee los mensaje mandado de arduino a visual			
{
	int bytesRecibidos, total = 0;
	char mensaje_recibido[MAX_BUFFER];

	bytesRecibidos = Arduino->ReadData(mensaje_recibido, sizeof(char) * MAX_BUFFER - 1);
	while (bytesRecibidos > 0)
	{
		Sleep(PAUSA_MS);
		total += bytesRecibidos;
		bytesRecibidos = Arduino->ReadData(mensaje_recibido + total, sizeof(char) * MAX_BUFFER - 1);
	}
	if (total > 0)
	{
		mensaje_recibido[total - 1] = '\0';
		printf("\nMensaje recibido: %s\n", mensaje_recibido);   //Imprime por pantalla el mensaje recibido
	}
}


void escribir_fichero_registro(registro* r, int nr, int nt)   //Funcion que genera un fichero con la informacion guardada
{															  //en el elemento registro
	int i, j;
	FILE* pf;
	errno_t e;
	e = fopen_s(&pf, "Temperatura.txt", "wt");    //Abrimos el fichero temperatura.txt en modo escritura
	if (e == 0)									  //Si el fichero se ha podido crear
	{
		fprintf(pf, "Numero de registros: %d\n", nr);							//Escribe en el fichero el n� de registros realizado
		fprintf(pf, "Numero de temperaturas en registro %d: %d\n", nr + 1, nt); //Imprime el numero de temperaturas captadas
		for (i = 0; i < nr; i++)
		{
			fprintf(pf, "%d\n", (r + i)->dia);          //Se imprimen el resto de datos que identifican las tmperaturas leidas en una fecha determinada

			fprintf(pf, "%d\n", (r + i)->mes);
			fprintf(pf, "%d\n", (r + i)->anio);
			fprintf(pf, "%d\n", (r + i)->hora);
			fprintf(pf, "%d\n", (r + i)->minutos);
			for (j = 0; j < nt; j++)
			{
				fprintf(pf, "%.3f\n", (r + i)->temperatura[j]);  //Imprime en el fichero las temperaturas leidas
			}
		}
		fclose(pf);				//Se cierra el fichero
	}
	else
		printf("Se ha producido un problema a la hora de grabar el fichero de usuarios\n"); //Imprime error por pantalla
}


void registrar_temperatura(registro* r, int i)     //Funcion que pide al usuario que intorduca la fecha y hora del registro 
{												   //en el que se van a guardar las temperaturas
	char intro;

	printf("Nuevo registro\n");
	printf("Dia:");
	scanf_s("%d", &r->dia);
	printf("Mes:");
	scanf_s("%d", &r->mes);
	printf("Anio:");
	scanf_s("%d", &r->anio);
	printf("hora:");
	scanf_s("%d", &r->hora);
	printf("minutos:");
	scanf_s("%d", &r->minutos);

	intro = getchar();
}
